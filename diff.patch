diff --git a/test/wbi.js b/test/wbi.js
index 0a08cc9..f7e326c 100644
--- a/test/wbi.js
+++ b/test/wbi.js
@@ -282,7 +282,7 @@ contract("WBI", accounts => {
 
       // subscribe to PostedResult event
       wbiInstance.PostedResult({}, async (_error, event) => {
-        let readresBytes1 = await wbiInstance.readResult.call(data1)
+        let readresBytes1 = await wbiInstance.readResult.call(id1)
         assert.equal(resBytes, readresBytes1)
       })
 
@@ -347,8 +347,8 @@ contract("WBI", accounts => {
       })
       const txHash1 = await waitForHash(tx1)
       let txReceipt1 = await web3.eth.getTransactionReceipt(txHash1)
-      let data1 = txReceipt1.logs[0].data
-      assert.equal(web3.utils.hexToNumberString(data1), web3.utils.hexToNumberString("0x0"))
+      let id1 = txReceipt1.logs[0].data
+      assert.equal(web3.utils.hexToNumberString(id1), web3.utils.hexToNumberString("0x0"))
 
       var blockHeader = "0x" + sha.sha256("block header")
       const roots = calculateRoots(drBytes, resBytes)
@@ -360,7 +360,7 @@ contract("WBI", accounts => {
 
       // claim data request
       const tx2 = wbiInstance.claimDataRequests(
-        [data1],
+        [id1],
         proof,
         publicKey,
         fastVerifyParams[0],
@@ -371,7 +371,7 @@ contract("WBI", accounts => {
       await waitForHash(tx2)
 
       // should fail to read blockhash from a non-existing block
-      await truffleAssert.reverts(wbiInstance.reportDataRequestInclusion(data1, [dummySibling], 2, fakeBlockHeader, {
+      await truffleAssert.reverts(wbiInstance.reportDataRequestInclusion(id1, [dummySibling], 2, fakeBlockHeader, {
         from: accounts[1],
       }), "Non-existing block")
     })
@@ -398,10 +398,10 @@ contract("WBI", accounts => {
       })
       const txHash1 = await waitForHash(tx1)
       let txReceipt1 = await web3.eth.getTransactionReceipt(txHash1)
-      let data1 = txReceipt1.logs[0].data
+      let id1 = txReceipt1.logs[0].data
 
       // assert it reverts when rewards are higher than values sent
-      await truffleAssert.reverts(wbiInstance.upgradeDataRequest(data1, web3.utils.toWei("2", "ether"), {
+      await truffleAssert.reverts(wbiInstance.upgradeDataRequest(id1, web3.utils.toWei("2", "ether"), {
         from: accounts[0],
         value: web3.utils.toWei("1", "ether"),
       }), "Transaction value needs to be equal or greater than tally reward")
@@ -426,7 +426,7 @@ contract("WBI", accounts => {
       })
       const txHash1 = await waitForHash(tx1)
       let txReceipt1 = await web3.eth.getTransactionReceipt(txHash1)
-      let data1 = txReceipt1.logs[0].data
+      let id1 = txReceipt1.logs[0].data
 
       var blockHeader = "0x" + sha.sha256("block header")
       const roots = calculateRoots(drBytes, resBytes)
@@ -438,7 +438,7 @@ contract("WBI", accounts => {
 
       // claim data request
       const tx2 = wbiInstance.claimDataRequests(
-        [data1],
+        [id1],
         proof,
         publicKey,
         fastVerifyParams[0],
@@ -449,13 +449,13 @@ contract("WBI", accounts => {
       await waitForHash(tx2)
 
       // check if data request is not claimable
-      let claimCheck = await wbiInstance.checkDataRequestsClaimability.call([data1])
+      let claimCheck = await wbiInstance.checkDataRequestsClaimability.call([id1])
       assert.deepEqual([false], claimCheck)
 
       // should revert when trying to claim it again
       await truffleAssert.reverts(
         wbiInstance.claimDataRequests(
-          [data1],
+          [id1],
           proof,
           publicKey,
           fastVerifyParams[0],
@@ -559,7 +559,7 @@ contract("WBI", accounts => {
       })
       const txHash1 = await waitForHash(tx1)
       let txReceipt1 = await web3.eth.getTransactionReceipt(txHash1)
-      let data1 = txReceipt1.logs[0].data
+      let id1 = txReceipt1.logs[0].data
 
       var blockHeader = "0x" + sha.sha256("block header")
       const roots = calculateRoots(drBytes, resBytes)
@@ -571,7 +571,7 @@ contract("WBI", accounts => {
 
       // claim data request
       const tx2 = wbiInstance.claimDataRequests(
-        [data1],
+        [id1],
         proof,
         publicKey,
         fastVerifyParams[0],
@@ -582,7 +582,7 @@ contract("WBI", accounts => {
       await waitForHash(tx2)
 
       // assert reporting a result when inclusion has not been proved fails
-      await truffleAssert.reverts(wbiInstance.reportResult(data1, [dummySybling], 1, blockHeader, resBytes, {
+      await truffleAssert.reverts(wbiInstance.reportResult(id1, [dummySybling], 1, blockHeader, resBytes, {
         from: accounts[1] }), "DR not yet included")
     })
     it("should revert because of reporting a result for a data request " +
@@ -675,11 +675,11 @@ contract("WBI", accounts => {
         })
         const txHash1 = await waitForHash(tx1)
         let txReceipt1 = await web3.eth.getTransactionReceipt(txHash1)
-        let data1 = txReceipt1.logs[0].data
+        let id1 = txReceipt1.logs[0].data
 
         // revert when reporting the same result
         await truffleAssert.reverts(wbiInstance.claimDataRequests(
-          [data1],
+          [id1],
           proof,
           publicKey,
           fastVerifyParams[0],
